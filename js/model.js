      var container, stats;      var materials = [];      var camera, scene, renderer;      var mouseX = 0, mouseY = 0;      var windowHalfX = window.innerWidth*0.8 / 2;      var windowHalfY = window.innerHeight*0.8 / 2;      init();      animate();      function init() {        var canvasdiv = document.getElementById("canvas");        container = document.createElement( 'div' );        canvasdiv.appendChild( container );        scene = new THREE.Scene();        camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 2000 );        // camera.position.z = 100;        // camera.position.y = -0;        // camera.position.x = 200;        camera.position.set(10,15,40);        camera.lookAt(scene.position);         // scene        // SETUP ORBIT CONTROL OF THE CAMERA        var controls = new THREE.OrbitControls(camera);        controls.damping = 0.2;        var ambient = new THREE.AmbientLight( 0x444444 );        // ambient.needsUpdate = false;        scene.add( ambient );        // var directionalLight = new THREE.DirectionalLight( 0xffffff,1);        // directionalLight.position.set( 0, 0, 1 ).normalize();        // scene.add( directionalLight );        var sunLight = new THREE.PointLight( 0xFFffff,1,100);        sunLight.position.set( 30, 30, -55 );        scene.add( sunLight );        scene.add( new THREE.PointLightHelper( sunLight, 5 ) );        var sunLight2 = new THREE.PointLight( 0xFFffff,0.8,100);        sunLight2.position.set( -14, 20, -25 );        scene.add( sunLight2 );        scene.add( new THREE.PointLightHelper( sunLight2, 5 ) );        var sunLight3 = new THREE.PointLight( 0xFFffff,0.8,100);        sunLight3.position.set( -14, 20, 0 );        scene.add( sunLight3 );        scene.add( new THREE.PointLightHelper( sunLight3, 5 ) );        var bigLight = new THREE.PointLight( 0xFFffff,0.8,50);        bigLight.position.set( 15, 35, -15 );        scene.add( bigLight );        scene.add( new THREE.PointLightHelper( bigLight, 5 ) );        var worldFrame = new THREE.AxisHelper(5) ;        scene.add(worldFrame);        var displayScreenGeometry = new THREE.CylinderGeometry(5, 5, 10, 32);        var displayMaterial = new THREE.MeshBasicMaterial({color: 0xffff00, transparent: true, opacity: 0.2});        var displayObject = new THREE.Mesh(displayScreenGeometry,displayMaterial);        displayObject.position.x = 0;        displayObject.position.y = 5;        //scene.add(displayObject);        displayObject.parent = worldFrame;        // FLOOR         var floorTexture = new THREE.TextureLoader('images/floor.jpg');        floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;        // floorTexture.repeat.set(1, 1);        var floorMaterial = new THREE.MeshBasicMaterial({ map: floorTexture, side: THREE.DoubleSide });        var floorGeometry = new THREE.PlaneBufferGeometry(30, 30);        var floor = new THREE.Mesh(floorGeometry, floorMaterial);        floor.position.y = -0.1;        floor.rotation.x = Math.PI / 2;        //scene.add(floor);        floor.parent = worldFrame;        // model        var onProgress = function ( xhr ) {          if ( xhr.lengthComputable ) {            var percentComplete = xhr.loaded / xhr.total * 100;            console.log( Math.round(percentComplete, 2) + '% downloaded' );          }        };        var onError = function ( xhr ) { };        THREE.Loader.Handlers.add( /\.dds$/i, new THREE.DDSLoader() );        var mtlLoader = new THREE.MTLLoader();        mtlLoader.setTexturePath( 'obj/keting/' );        mtlLoader.setPath( 'obj/keting/' );        mtlLoader.load( 'Changj.mtl', function( materials ) {          for (var i = 0; i < materials.length; i++) {            materials[i].needsUpdate = false;          };          materials.preload();          var objLoader = new THREE.OBJLoader();          objLoader.setMaterials( materials );          objLoader.setPath( 'obj/keting/' );          objLoader.load( 'Changj.obj', function ( object ) {            // object.position.y = - 30;            scene.add( object );          }, onProgress, onError );        });        // UNIFORMS        var remotePosition = {type: 'v3', value: new THREE.Vector3(0,5,3)};        var tvChannel = {type: 'i', value: 1};        // MATERIALS        var armadilloMaterial = new THREE.ShaderMaterial();        var remoteMaterial = new THREE.ShaderMaterial({           uniforms: {            remotePosition: remotePosition,          },        });        // CREATE REMOTE CONTROL        var remoteGeometry = new THREE.SphereGeometry(1, 32, 32);        var remote = new THREE.Mesh(remoteGeometry, remoteMaterial);        remote.parent = worldFrame;        scene.add(remote);        // LISTEN TO KEYBOARD        var keyboard = new THREEx.KeyboardState();        function checkKeyboard() {          if (keyboard.pressed("W")){            console.log("hihihi")            floor.position.z -= 0.1;          }          else if (keyboard.pressed("S"))            remotePosition.value.z += 0.1;          if (keyboard.pressed("A"))            remotePosition.value.x -= 0.1;          else if (keyboard.pressed("D"))            remotePosition.value.x += 0.1;          if (keyboard.pressed("R"))            remotePosition.value.y += 0.1;          else if (keyboard.pressed("F"))            remotePosition.value.y -= 0.1;          for (var i=1; i<4; i++)          {            if (keyboard.pressed(i.toString()))            {              tvChannel.value = i;              break;            }          }          remoteMaterial.needsUpdate = true; // Tells three.js that some uniforms might have changed        }        scene.fog = new THREE.FogExp2( 0x000000, 0.0008 );        geometry = new THREE.Geometry();        var textureLoader = new THREE.TextureLoader();        sprite1 = textureLoader.load( "textures/cold.png" );        // sprite2 = textureLoader.load( "textures/snowflake2.png" );        for ( i = 0; i < 100; i ++ ) {          var vertex = new THREE.Vector3();          vertex.x = Math.random(0,1)*5+5;          vertex.y = Math.random(0,1)*10+5;          vertex.z = Math.random(0,1)*5+10;          geometry.vertices.push( vertex );        }        parameters = [          // [ [0.95, 0.1, 0.5], sprite3, 15  ],          [ [0.90, 0.05, 0.5], sprite1, 2 ],          // [ [0.85, 0, 0.5], sprite5, 8 ],          // [ [0.80, 0, 0.5], sprite4, 5 ]        ];        for ( i = 0; i < parameters.length; i ++ ) {          color  = parameters[i][0];          sprite = parameters[i][1];          size   = parameters[i][2];          materials[i] = new THREE.PointsMaterial( { size: size, map: sprite, blending: THREE.AdditiveBlending, depthTest: false, transparent : true } );          materials[i].color.setHSL( color[0], color[1], color[2] );          particles = new THREE.Points( geometry, materials[i] );          particles.rotation.x = Math.random() * 6;          particles.rotation.y = Math.random() * 6;          particles.rotation.z = Math.random() * 6;// particles.parent = worldFrame;          scene.add( particles );        }                renderer = new THREE.WebGLRenderer();        renderer.setClearColor(0x000000); // white background colour        renderer.setPixelRatio( window.devicePixelRatio );        renderer.setSize( window.innerWidth * 0.8, window.innerHeight * 0.8 );        // renderer.setSize( window.innerWidth, window.innerHeight );        container.appendChild( renderer.domElement );        stats = new Stats();        container.appendChild( stats.dom );        document.addEventListener( 'mousemove', onDocumentMouseMove, false );        document.addEventListener( 'touchstart', onDocumentTouchStart, false );        document.addEventListener( 'touchmove', onDocumentTouchMove, false );        //        // window.addEventListener( 'resize', onWindowResize, false );      }      // function onWindowResize() {      //   windowHalfX = window.innerWidth / 2;      //   windowHalfY = window.innerHeight / 2;      //   camera.aspect = window.innerWidth / window.innerHeight;      //   camera.updateProjectionMatrix();      //   renderer.setSize( window.innerWidth, window.innerHeight );      // }      function onDocumentMouseMove( event ) {        mouseX = ( event.clientX - windowHalfX ) / 2;        mouseY = ( event.clientY - windowHalfY ) / 2;      }      function onDocumentTouchStart( event ) {        if ( event.touches.length === 1 ) {          event.preventDefault();          mouseX = event.touches[ 0 ].pageX - windowHalfX;          mouseY = event.touches[ 0 ].pageY - windowHalfY;        }      }      function onDocumentTouchMove( event ) {        if ( event.touches.length === 1 ) {          event.preventDefault();          mouseX = event.touches[ 0 ].pageX - windowHalfX;          mouseY = event.touches[ 0 ].pageY - windowHalfY;        }      }      //      function animate() {        requestAnimationFrame( animate );        render();        stats.update();      }      function render() {        var time = Date.now() * 0.00005;        camera.position.x += ( mouseX - camera.position.x ) ;        camera.position.y += ( - mouseY - camera.position.y ) ;        camera.lookAt( scene.position );        // for ( i = 0; i < scene.children.length; i ++ ) {        //   var object = scene.children[ i ];        //   if ( object instanceof THREE.Points ) {        //     object.rotation.y = time * ( i < 4 ? i + 1 : - ( i + 1 ) );        //   }        // }        // for ( i = 0; i < materials.length; i ++ ) {        //   color = parameters[i][0];        //   h = ( 360 * ( color[0] + time ) % 360 ) / 360;        //   materials[i].color.setHSL( h, color[1], color[2] );        // }        renderer.render( scene, camera );      }